// Code generated by MockGen. DO NOT EDIT.
// Source: repos.go

// Package repos is a generated GoMock package.
package repos

import (
	v1alpha1 "github.com/fluxcd/source-controller/api/v1alpha1"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepos is a mock of Repos interface
type MockRepos struct {
	ctrl     *gomock.Controller
	recorder *MockReposMockRecorder
}

// MockReposMockRecorder is the mock recorder for MockRepos
type MockReposMockRecorder struct {
	mock *MockRepos
}

// NewMockRepos creates a new mock instance
func NewMockRepos(ctrl *gomock.Controller) *MockRepos {
	mock := &MockRepos{ctrl: ctrl}
	mock.recorder = &MockReposMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepos) EXPECT() *MockReposMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockRepos) Add(srcRepo *v1alpha1.GitRepository) Repo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", srcRepo)
	ret0, _ := ret[0].(Repo)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockReposMockRecorder) Add(srcRepo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRepos)(nil).Add), srcRepo)
}

// Get mocks base method
func (m *MockRepos) Get(name string) Repo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(Repo)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockReposMockRecorder) Get(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepos)(nil).Get), name)
}

// Delete mocks base method
func (m *MockRepos) Delete(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", name)
}

// Delete indicates an expected call of Delete
func (mr *MockReposMockRecorder) Delete(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepos)(nil).Delete), name)
}

// List mocks base method
func (m *MockRepos) List() map[string]Repo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(map[string]Repo)
	return ret0
}

// List indicates an expected call of List
func (mr *MockReposMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepos)(nil).List))
}

// MockRepo is a mock of Repo interface
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// GetName mocks base method
func (m *MockRepo) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockRepoMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockRepo)(nil).GetName))
}

// GetSourceName mocks base method
func (m *MockRepo) GetSourceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSourceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSourceName indicates an expected call of GetSourceName
func (mr *MockRepoMockRecorder) GetSourceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceName", reflect.TypeOf((*MockRepo)(nil).GetSourceName))
}

// GetSourceNameSpace mocks base method
func (m *MockRepo) GetSourceNameSpace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSourceNameSpace")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSourceNameSpace indicates an expected call of GetSourceNameSpace
func (mr *MockRepoMockRecorder) GetSourceNameSpace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceNameSpace", reflect.TypeOf((*MockRepo)(nil).GetSourceNameSpace))
}

// SyncRepo mocks base method
func (m *MockRepo) SyncRepo() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncRepo")
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncRepo indicates an expected call of SyncRepo
func (mr *MockRepoMockRecorder) SyncRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncRepo", reflect.TypeOf((*MockRepo)(nil).SyncRepo))
}

// GetDataPath mocks base method
func (m *MockRepo) GetDataPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDataPath indicates an expected call of GetDataPath
func (mr *MockRepoMockRecorder) GetDataPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataPath", reflect.TypeOf((*MockRepo)(nil).GetDataPath))
}

// LinkData mocks base method
func (m *MockRepo) LinkData(layerPath, sourcePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkData", layerPath, sourcePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkData indicates an expected call of LinkData
func (mr *MockRepoMockRecorder) LinkData(layerPath, sourcePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkData", reflect.TypeOf((*MockRepo)(nil).LinkData), layerPath, sourcePath)
}
