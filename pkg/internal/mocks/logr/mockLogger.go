// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-logr/logr (interfaces: Logger)

package mocks

import (
	logr "github.com/go-logr/logr"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLogger is a mock of Logger interface
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return _m.recorder
}

// Enabled mocks base method
func (_m *MockLogger) Enabled() bool {
	ret := _m.ctrl.Call(_m, "Enabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Enabled indicates an expected call of Enabled
func (_mr *MockLoggerMockRecorder) Enabled() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Enabled", reflect.TypeOf((*MockLogger)(nil).Enabled))
}

// Error mocks base method
func (_m *MockLogger) Error(_param0 error, _param1 string, _param2 ...interface{}) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Error", _s...)
}

// Error indicates an expected call of Error
func (_mr *MockLoggerMockRecorder) Error(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), _s...)
}

// Info mocks base method
func (_m *MockLogger) Info(_param0 string, _param1 ...interface{}) {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Info", _s...)
}

// Info indicates an expected call of Info
func (_mr *MockLoggerMockRecorder) Info(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), _s...)
}

// V mocks base method
func (_m *MockLogger) V(_param0 int) logr.InfoLogger {
	ret := _m.ctrl.Call(_m, "V", _param0)
	ret0, _ := ret[0].(logr.InfoLogger)
	return ret0
}

// V indicates an expected call of V
func (_mr *MockLoggerMockRecorder) V(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "V", reflect.TypeOf((*MockLogger)(nil).V), arg0)
}

// WithName mocks base method
func (_m *MockLogger) WithName(_param0 string) logr.Logger {
	ret := _m.ctrl.Call(_m, "WithName", _param0)
	ret0, _ := ret[0].(logr.Logger)
	return ret0
}

// WithName indicates an expected call of WithName
func (_mr *MockLoggerMockRecorder) WithName(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "WithName", reflect.TypeOf((*MockLogger)(nil).WithName), arg0)
}

// WithValues mocks base method
func (_m *MockLogger) WithValues(_param0 ...interface{}) logr.Logger {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "WithValues", _s...)
	ret0, _ := ret[0].(logr.Logger)
	return ret0
}

// WithValues indicates an expected call of WithValues
func (_mr *MockLoggerMockRecorder) WithValues(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "WithValues", reflect.TypeOf((*MockLogger)(nil).WithValues), arg0...)
}
