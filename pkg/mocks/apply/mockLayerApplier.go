// Code generated by MockGen. DO NOT EDIT.
// Source: layerApplier.go

// Package apply is a generated GoMock package.
package apply

import (
	context "context"
	layers "github.com/fidelity/kraan/pkg/layers"
	v1 "github.com/fluxcd/helm-operator/pkg/apis/helm.fluxcd.io/v1"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLayerApplier is a mock of LayerApplier interface
type MockLayerApplier struct {
	ctrl     *gomock.Controller
	recorder *MockLayerApplierMockRecorder
}

// MockLayerApplierMockRecorder is the mock recorder for MockLayerApplier
type MockLayerApplierMockRecorder struct {
	mock *MockLayerApplier
}

// NewMockLayerApplier creates a new mock instance
func NewMockLayerApplier(ctrl *gomock.Controller) *MockLayerApplier {
	mock := &MockLayerApplier{ctrl: ctrl}
	mock.recorder = &MockLayerApplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLayerApplier) EXPECT() *MockLayerApplierMockRecorder {
	return m.recorder
}

// Apply mocks base method
func (m *MockLayerApplier) Apply(ctx context.Context, layer layers.Layer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", ctx, layer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply
func (mr *MockLayerApplierMockRecorder) Apply(ctx, layer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockLayerApplier)(nil).Apply), ctx, layer)
}

// Prune mocks base method
func (m *MockLayerApplier) Prune(ctx context.Context, layer layers.Layer, pruneHrs []*v1.HelmRelease) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prune", ctx, layer, pruneHrs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Prune indicates an expected call of Prune
func (mr *MockLayerApplierMockRecorder) Prune(ctx, layer, pruneHrs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prune", reflect.TypeOf((*MockLayerApplier)(nil).Prune), ctx, layer, pruneHrs)
}

// PruneIsRequired mocks base method
func (m *MockLayerApplier) PruneIsRequired(ctx context.Context, layer layers.Layer) (bool, []*v1.HelmRelease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PruneIsRequired", ctx, layer)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([]*v1.HelmRelease)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PruneIsRequired indicates an expected call of PruneIsRequired
func (mr *MockLayerApplierMockRecorder) PruneIsRequired(ctx, layer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PruneIsRequired", reflect.TypeOf((*MockLayerApplier)(nil).PruneIsRequired), ctx, layer)
}

// ApplyIsRequired mocks base method
func (m *MockLayerApplier) ApplyIsRequired(ctx context.Context, layer layers.Layer) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyIsRequired", ctx, layer)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyIsRequired indicates an expected call of ApplyIsRequired
func (mr *MockLayerApplierMockRecorder) ApplyIsRequired(ctx, layer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyIsRequired", reflect.TypeOf((*MockLayerApplier)(nil).ApplyIsRequired), ctx, layer)
}

// ApplyWasSuccessful mocks base method
func (m *MockLayerApplier) ApplyWasSuccessful(ctx context.Context, layer layers.Layer) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyWasSuccessful", ctx, layer)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyWasSuccessful indicates an expected call of ApplyWasSuccessful
func (mr *MockLayerApplierMockRecorder) ApplyWasSuccessful(ctx, layer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyWasSuccessful", reflect.TypeOf((*MockLayerApplier)(nil).ApplyWasSuccessful), ctx, layer)
}
